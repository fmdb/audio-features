name: Build application

on:
  workflow_dispatch:

env:
  VERSION: ${{ github.ref_name }}

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            platform: linux
          - os: macos-latest
            platform: macos
          - os: windows-latest
            platform: windows

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - uses: "actions/setup-node@v4"
        with:
          node-version: 'lts/*'

      - name: Generate Build ID
        id: build_id
        env:
          GITHUB_TOKEN: ${{ secrets.SEMANTIC_RELEASE }}
        run: |
          SHORT_HASH=$(git rev-parse --short HEAD)
          VERSION=$(npx semantic-release --dry-run | grep "The next release version is" | sed 's/.*The next release version is \([0-9.]*\).*/\1/' || echo '0.0.0')
          echo "BUILD_ID=${VERSION}+${SHORT_HASH}" >> $GITHUB_ENV
        shell: bash

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build Binary
        run: |
          pyinstaller audio_mfcc.spec
        shell: bash
        env:
          BUILD_ID: ${{ env.BUILD_ID }}

      - name: Rename Binary with Build ID
        run: |
          if [ "${{ matrix.platform }}" = "windows" ]; then
            mv dist/fmdb_audio_mfcc.exe "dist/fmdb_audio_mfcc-${{ env.BUILD_ID }}.exe"
          else
            mv dist/fmdb_audio_mfcc "dist/fmdb_audio_mfcc-${{ env.BUILD_ID }}"
          fi
        shell: bash

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-fmdb_audio_mfcc
          path: dist/fmdb_audio_mfcc-*

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Linux Artifact
        uses: actions/download-artifact@v4
        with:
          name: linux-fmdb_audio_mfcc
          path: dist/linux

      - name: Download MacOS Artifact
        uses: actions/download-artifact@v4
        with:
          name: macos-fmdb_audio_mfcc
          path: dist/macos

      - name: Download Windows Artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-fmdb_audio_mfcc
          path: dist/windows

      - name: List Artifacts
        run: |
          ls -R dist/
        shell: bash

      - uses: "actions/setup-node@v4"
        with:
          node-version: 'lts/*'

      - name: "Run semantic-release"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release